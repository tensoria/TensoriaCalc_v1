#!/usr/bin/env wolframscript
(* ::Package:: *)

(* ::Title:: *)
(*TensoriaCalc*)


(* ::Subsection:: *)
(*First Priority*)


(* ::Text:: *)
(*\[EmptySmallCircle] Publish documentation in Computer Physics Communications? See e . g ., FeynCalc and xAct .*)
(*\[EmptySmallCircle] ? Riemann ?Ricci display complain.*)
(*\[EmptySmallCircle] See why T /. i -> 1000 will give you 0 zero but not complain. When 1000 lies out range of coordinate number.*)
(*\[EmptySmallCircle] The label of ONFF for non-diagonal metric should  be labelled with numeric indices but not coordinate indices.*)
(*\[EmptySmallCircle] PotentialForm: A check could be inserted to verify whether the exterior derivative of \[Alpha] is zero or not. If it not zero, the integration will not give a unique solution and so should complain. *)
(*\[EmptySmallCircle] I should make sure that we do not use TestTensorIsFullyAntiSymmetric in our package.*)
(*\[EmptySmallCircle] Change the check of Indices from TestEF into Tensor or List Head. See other extract function.*)
(*Test1*)


(* ::Subsection:: *)
(*Solved?/Solved!*)


(* ::Text:: *)
(*\[EmptySmallCircle] (Solved?) Order of Tensor objects occurring in ContractTensors need to be handled more carefully. Also, should output always be a single Tensor? Metric Tensors should be treated separately and properly. *)
(*Test1*)
(*\[UpDownArrow]*)
(*\[EmptySmallCircle] (Solved?) TensorProduct of Tensors will allow for ContractTensors to be implement more readily, since we already have summation convenction implemented?*)
(*\[UpDownArrow]*)
(*\[EmptySmallCircle] (Solved?) ContractTensors can be expanded? To make the output more flexible. (20250509 WH: I think it's solved. However, it depends on what kind of flexibility. On the other hand, should we add ContractTensors back?)*)
(*\[EmptySmallCircle] (Solved!: See Wei-Hao's thesis p.188) CovariantD checks. CovariantD needs to distribute over Plus; how should it act on a tensor product? *)
(*\[EmptySmallCircle] (Solved!)It should not be too difficult to extend CoordinateTransformation so that it can act on Tensor's.*)
(*\[EmptySmallCircle] (Solved!)We need to allow for sums and products of Tensors and scalars!*)
(*\[EmptySmallCircle] (Solved!) Write NonMetricTensor code.*)
(*\[EmptySmallCircle] (Solved!) Allow for basis vectors/forms display format?*)
(*\[EmptySmallCircle] (Solved!) Write general converter from quadratic form (of differentials) to matrix and vice versa? Mixed/vectors too?*)
(*\[EmptySmallCircle] (Half solved) Introduce some sort of slot mechanism internally to allow for more control over placement of indices?*)
(*\[EmptySmallCircle] (Solved?)How to update tooltipdisplay after indices have been moved?*)
(*\[EmptySmallCircle] (Solved!) New functions: \[DifferentialD] on Tensor. Wedge products.*)
(*\[EmptySmallCircle] (Solved!) Induced metrics & coordinate transformations of Tensors*)
(*\[EmptySmallCircle] (Solved!) General Lie Derivatives.*)
(*\[EmptySmallCircle] (Solved!) Exterior derivatives.*)
(*\[EmptySmallCircle] (Solved!) Interior product*)
(*\[EmptySmallCircle] (Solved?) LaplaceBeltrami*)
(*\[EmptySmallCircle] (Solved!) CovariantBox needs to be updated to allow for higher rank tensors as input.*)
(*\[EmptySmallCircle] (Solved!) Orthonormal basis computation*)
(*\[EmptySmallCircle] (Solved! See: TC wo TsP.nb)TensorCompoments acting on products of tensors with no contracted indices does not seem to work. This is probably because ContractTensors does not do anything when there are no contracted indices?*)
(*\[UpDownArrow]Same thing*)
(*\[EmptySmallCircle] Extend the functionality of TensorComponents. For e.g. TensorComponents acting on product of Tensor objects does not work.*)
(*\[EmptySmallCircle] (Solved!) Allow PartialD to take in coordinates (as a List) instead of only allowing for Metric m_Tensor*)
(*\[EmptySmallCircle] (Solved! See: Compare Timing of commutation of CD and TsP.nb)Is it good policy/strategy to ContractTensors before taking their CovariantD?*)
(*\[EmptySmallCircle] (Solved?) Create a DisplayTensorContents function*)
(*\[EmptySmallCircle] (Solved?) Make sure all relevant functions work on generic expressions, not just a single Tensor. (E.g., CovariantD should be able to act on sums/products of objects.) *)
(*\[EmptySmallCircle] (Solved? The SparseArray itself)Create function that spits out only the non-zero components of a tensor as replacement rules. Maybe extend the functionality of TensorComponents.*)
(*\[EmptySmallCircle] (Solved!) What is the difference between putting the condition(s) /;(stuff) before vs after an equality? E.g. f/:f[t_]/;(stuff):=xxxx vs f/:f[t_]:=xxxx/;(stuff)*)
(*\[EmptySmallCircle] (Solved?) Consider allowing end user to customize Tooltipdisplay for Metric and other Tensors.*)
(*\[EmptySmallCircle] (Solved!) NonMetricTensor should allow for creation of a scalar*)
(*\[EmptySmallCircle] (Solved!) TooltipDisplay for Ricci tensor. Should display a square matrix instead of a List.*)
(*\[EmptySmallCircle] (Solved!) Make sure TensoriaCalc can properly handle ratios (i.e., divisions) involving Tensor objects. E.g. Feynman diagram calculations.*)
(*\[EmptySmallCircle] (Solved!) TensorComponents[Subscript[T, \[Mu]\[Nu]]+Subscript[T, \[Nu]\[Mu]]] and TensorComponents[Subscript[T, \[Mu]\[Nu]]-Subscript[T, \[Nu]\[Mu]]] have ambiguities and will currently yield wrong answers.*)
(*\[EmptySmallCircle] (Solved!) Can PartialD handle mixed expressions involving products of expressions times Tensors? Or even products of Tensors?*)
(*\[EmptySmallCircle] (Solved?) CovariantD pop-up message has ErrorBox*)
(*\[EmptySmallCircle] (Solved!) Upon applying ContractTensors, if the result is a scalar \[LongDash] should we allow for an option to preserve the result as a Tensor rather than merely a MMA expression?*)
(*\[EmptySmallCircle] (Solved!) For PartialD, with a lower index, we should allow for input either the metric or a set of coordinates. *)
(*\[EmptySmallCircle] (Solved!) Understand how to control the order of Tensors when applying ContractTensors.*)
(*\[EmptySmallCircle] (Solved!) Consider how to make user to turn on or off TooltipDisplay in case the nonzero components are too complicated.*)
(*\[EmptySmallCircle] (Solved!) Make CovariantBox to be able to act on Tensor.*)
(*\[EmptySmallCircle] (Solved? See: substraction of same tensors.nb)The subtraction between two same Tensors will lose the information of Tensor. e.g. Subscript[J, x]-Subscript[J, x]=0. and zero is not Tensor object.*)
(*\[EmptySmallCircle] (Solved? See: NotAbstractIndex Test.nb)When we input a numeric index lying out of range, what should we do with it? Moreover, SuperMinus[20] SubMinus[20] should not trigger Einstein summation if 20 lies out of range. Check that all the functions that use NotAbstractIndex works as intended.*)
(*\[EmptySmallCircle] (Solved?) MHDSystem should output objects with MoveIndices wrapped around them, so that their indices can be moved automatically.*)
(*\[EmptySmallCircle] (Solved!) Problem: Nested Tensor object (especially a complicated one. For e.g., a Kerr metric w/ ONFF->ONFFt) can not trigger Format properly. (See: Nested Tensor and TooltipStyle.nb) (20250505 WH: I don't know why there is a bug at the very first place. Probably MMA solve some bug on v.13.0 so it no longer a problem.) (When I wrote down Kerr metric, I thought I meant BL coordinate. However, MMA can not tackle BL ONFF properly. That confused me. However, I tried Kerr-Schild and it worked.)*)
(*\[UpDownArrow]Same thing*)
(*\[EmptySmallCircle] (Solved!) Right now, whenever there is a nested Tensor, it conflicts w/ Wei-Hao Format code.*)
(*\[EmptySmallCircle] (Solved!) We should consider the TensorType(s) other than "Metric" and "ChristoffelSymbols" truly are necessary? (20250509 WH: I once deleted all the unused TensorType. We should add more only if we will use it.)*)
(*\[EmptySmallCircle] (Solved!) How to implement this e.g. in Subscript[R, xyzw](dx\[TensorWedge]dy)(dz\[TensorWedge]dw)+... ExpressionForm*)
(*\[EmptySmallCircle] (Solved! See: Sin[scalar tensor tensor].nb)Deal with 1/Sin[\[Phi] T^\[Mu]\[Nu] Subscript[\[CapitalGamma], \[Mu]\[Nu]]] with ContractTensors, where \[Phi] is a scalar Tensor.*)
(*\[EmptySmallCircle] (Solved!) TensorIsFullyAntiSymmetric Message. (20250509 WH: There is no Message now, but there is Message for TestDifferentialForm)*)
(*\[EmptySmallCircle] (Solved! See: Bug fixed: coefficient of InteriorProduct when p=q.nb) InteriorProduct [X,\[Omega]] and its short hand Subscript[\[Iota], X][\[Omega]] gives different output (20250509 WH: Bug solved on 20250509. This is also the first e.g. for the GitHub system.)*)
(*\[EmptySmallCircle] (Solved! See: The level Simplify and Replacement go through.nb) Still try to test on the level of Simplify w/ Actual function (20250512 WH: How is the level it will go through? I did a test. It goes through more than 500 levels so I don't think we need to worry about it.)*)
(*\[EmptySmallCircle] (Solved!) Replace null list into 1 for CT[alltensor](20250512 WH: Just run TensorsProduct[{}])*)
(*\[EmptySmallCircle] (Solved!) Refer to MMA Thread strategy. Construct ContractTensors version of it. (CT[Log[M^2 V^\[Mu] Subscript[W, \[Mu]]]]->Log[CTM^2 [V^\[Mu] Subscript[W, \[Mu]]]])*)
(*\[EmptySmallCircle] (Solved!) MatchQ[(Union[Sgn[#]&/@RemoveUnderBarredIndices[Indices[t]]]),{-1}|{}]) as a new function and add this check in TensorWedge*)


(* ::Subsection::Closed:: *)
(*Second priority*)


(* ::Text:: *)
(*\[EmptySmallCircle] Check through TensoriaCalc to see if we have used Indices -> indx to check for Dimension of Tensor, for e.g. Should really use TensorComponents.*)
(*\[EmptySmallCircle] We should think about altering how CovariantD's appear in output. Right now it does, for e.g., Del[V]^\[Mu]\[Nu], where V is a vector.*)
(*\[UpDownArrow]Same thing?*)
(*\[EmptySmallCircle] Format of Tensors need to be thought through more carefully, especially those Tensors with more complicated structure, for e.g., containing CovariantD's.*)
(*\[EmptySmallCircle] All index moving portions of TensoriaCalc should use MoveIndices. Right now the geometric tensors use their own internal code; not sure if it is slower or faster?*)
(*\[EmptySmallCircle] ContractTensors need to take into account contractions involving Metric Tensors.*)
(*\[UpDownArrow]Same thing?*)
(*\[EmptySmallCircle] (Solved by MoveIndices?)ContractTensors need to automatically raise/lower indices whenever metric is present.*)
(*\[EmptySmallCircle] Abstract: Expand CovD into \[PartialD] and Christoffels (and back?)*)
(*\[EmptySmallCircle] Commute CovD*)
(*\[EmptySmallCircle] Allow PartialD to take more than one derivative at a time.*)
(*\[EmptySmallCircle] Should we allow SwapIndices to also MoveIndices or vice versa?*)
(*\[EmptySmallCircle] RiemannToWeyl*)
(*\[EmptySmallCircle] In NonMetricTensor code, we did not check the consistency of the input indices and the Matrix.*)
(*\[EmptySmallCircle] In Metric, we should check that the number of input coordinates is the same as the Dimension of the input matrix*)
(*\[EmptySmallCircle] TensoriaCalc should check for duplicate replacement rules in Tensor objects and complain whenever there are in fact duplicates. This will allow the user to Append replacement rules directly into his/her Tensor objects w/o worrying too much about duplications.*)
(*\[EmptySmallCircle] Write a new OperatorRule to make if there is a zero in some Functions, the output will be automatically 0 also. For e.g., TensorsProduct[0, Tensor]->0.*)
(*\[EmptySmallCircle] Warning: CT an OverHat Tensor (a mixed coordinate Tensor). Then specify indices will occur a problem. (20250505 WH: What is the problem? The problem is if we  specify the coordinate, just from the appearance of the tensor, the information of OverHat will lost.)(I also put this ToDo in manual section)(Here is an example copy from my code:)*)


(* ::Input:: *)
(*(Rt/.{\[Nu]->t,\[Alpha]-> r,\[Beta]-> t})//FS*)
(*R\[Mu]0r0=(RtONFF/.{\!\(\*OverscriptBox[\(\[Nu]\), \(^\)]\)->t,\!\(\*OverscriptBox[\(\[Alpha]\), \(^\)]\)-> r,\!\(\*OverscriptBox[\(\[Beta]\), \(^\)]\)-> t})//FS*)


(* ::Text:: *)
(*\[EmptySmallCircle] Code up correct version of Christoffel Symbol transforming into Orthonormal Basis. (e.g., Fermion)*)
(*\[EmptySmallCircle] Warning: Right now we transform Christoffel into Orthonormal Basis like a tensor.(I also put this ToDo in manual section)*)
(*\[EmptySmallCircle] Simplify: (0^\[Mu]+T^\[Mu])//Simplify->T^\[Mu] (20250509 WH: Write a Simplification (e.g. TensorReduce?) to help users throw away the zero Tensor?)*)
(*\[EmptySmallCircle] Is there example showing benefits of storing SymmetrizedArray as a Tensor Property? Right now haven't seen.*)
(*\[EmptySmallCircle] The shortcut of CovariantHodgeDual, Metric endow function (Right now is commented out), storing ONFF as a Tensor in Metric, and storing Ambient Metric in induced metric, e.t.c., all  require we define Nested Tensor. Once we solve the problem we encounter in nested Tensor. We can cancel the comment out, or built new pattern for different function. (20250509 WH: The Nested Tensor problem seems solved in the MMA v.13. Now we can do it.)*)
(*\[EmptySmallCircle] Cotton tensor (FRW metric)*)
(*\[EmptySmallCircle] Implement functions in guide/FormulaManipulation to tackle Tensor object.*)
(*\[EmptySmallCircle] Weyl transf.*)
(*\[EmptySmallCircle] TensorProduct and shortcut*)
(*\[EmptySmallCircle] ElectromagneticStressTensor should check that its input tensor is anti-symmetric. Check if it overlaps with iMHD code; and consolidate the two if necessary.*)
(*\[EmptySmallCircle] Consider to add TensorAssumption as an optional argument in functions where the output will be a Tensor. For example, ElectromagneticStressEnergyTensor[SubMinus[\[Alpha]],SubMinus[\[Beta]],Ft,gBL,MetricSignature-> "Mostly minus",TensorAssumption->{}] *)
(*(20250509 WH: Is it necessary for all Function? If so, Maybe we can combine some default values endowing as a single OperatorRules. Right now, the output of ElectromagneticStressEnergyTensor will inherit TensorAssumption from Ft or gBL. Also, user could use Endow Function as an alternative solution.)*)
(*\[EmptySmallCircle] Operator rules on RaiseAllIndices (and other functions as well)*)
(*\[EmptySmallCircle] Improving the algorithm for ToTensorComponent. Consider switching SymmetrizedArray as the output for Fully (Anti-)Symmetric tensor. If we can firstly read out the symmetric property from the ExpressionForm itself.*)
(*\[UpDownArrow]May relevant *)
(*\[EmptySmallCircle] Simplify differential form and p-vector in expression form. For e.g. \[DifferentialD]x\[TensorWedge]\[DifferentialD]y+\[DifferentialD]y\[TensorWedge]\[DifferentialD]x=0 *)
(*\[EmptySmallCircle] Turn on and off of bracket with TensorSymmetric function and extra property *)
(*\[EmptySmallCircle] Test TensorComponentsManipulation again(20250512 WH: Not sure what kind of e.g. I wanted to test then.)*)
(*\[EmptySmallCircle] (See Chia-Yu's "tooldisplay.nb") We should not only obtain the non-zero components list inside the TooltipDisplay only but let user to directly print it. If the list becomes too huge. The TooltipStyle can't solve the problem since when the font size is too small, although the Tooltip box is small enough, user still can not read it.*)
(*\[EmptySmallCircle] The endow function for ONFF related properties.*)


(* ::Subsection::Closed:: *)
(*Long Term*)


(* ::Text:: *)
(*\[EmptySmallCircle] Currently, ContractTensors only creates a TensorProduct of Tensors with the same Coordinates. Need to generalize. But how? Are there different character sets in Mathematica that we can exploit for different sorts of Einstein summation?*)
(*\[EmptySmallCircle] (Meaning?) Discretize PDEs in curved spacetimes for numerical solutions? May need to export to Fortran/C++/Python, etc.? Ability to Discretize Einstein's & Yang-Mills Equations. See Doug Arnold's (@ UMN Math) work.*)
(*\[EmptySmallCircle] (Meaning?) Can we extend Tensor to BiTensor or even NTensor? Applications: Green's functions.*)
(*\[EmptySmallCircle] Look up educational resources for teaching GR. Can TensoriaCalc become a useful tool?*)
(*\[EmptySmallCircle] Torsion? Metric non-compatibility?*)
(*\[EmptySmallCircle] Exploit Mathematica's Tensor abilities.*)
(*\[EmptySmallCircle] (Meaning?) Parallelize functions \[LongDash] for e.g., all the summation/computation of Christoffel, Riemann, etc.?*)
(*\[EmptySmallCircle] (Meaning?) Read field theory typed in L AT EX to Tensor objects? Also allow for output to L AT EX.*)
(*\[EmptySmallCircle] (Meaning?) How to allow for Yang-Mills color index? Some sort of generalized tensor product?*)
(*\[UpDownArrow]Same thing?*)
(*\[EmptySmallCircle] New arguments for Tensor: IndexPartition -> stuff and IndexType/IndexSpaces -> stuff? (so as to allow for different spaces \[LongDash] spacetime vs color indices, for e.g.) Need to account for coordinates too*)
(*\[EmptySmallCircle] (Meaning?) Canonicalize tensors*)
(*\[EmptySmallCircle] Allow for summation over different sub-ranges of indices: for e.g., Subscript[V, \[Mu]] W^\[Mu]=Subscript[V, 0] W^0+Subscript[V, i] W^i or Subscript[V, \[Mu]] W^\[Mu]=Subscript[V, 0] W^0+Subscript[V, r] W^r+Subscript[V, I] W^I; if difficult to allow for arbitrary "layers" do at least 3?*)
(*\[EmptySmallCircle] (Meaning?) Wang Yi's MathGR reference for indices. https://arxiv.org/abs/1306.1295*)
(*\[EmptySmallCircle] "Symbolic Tensors" from Mathematica documentation. *)
(*\[UpDownArrow]*)
(*\[EmptySmallCircle] Should we implement $Assumptions to simplify certain calculations in TensoriaCalc.*)
(*\[EmptySmallCircle] How to do perturbation theory involving products of Tensors?*)
(*\[EmptySmallCircle] Extend Determinant to any square rank-2 Tensor*)
(*\[EmptySmallCircle] When applying ContractTensors on products of Tensor objects, we should not allow for repeated indices that are both up or both down.*)
(*\[EmptySmallCircle] ContractTensors ought to carry over properties of all the Tensors it is multiplying together, not just the first.*)
(*\[EmptySmallCircle] Code up Cotton Tensor.*)
(*\[EmptySmallCircle] When we want to caution people what not to be done, we add "Message".*)
(*\[UpDownArrow]*)
(*\[EmptySmallCircle] CheckIndex Message complain too much, so I comment that out. (20250509 WH's Guide: Be careful to add Message. The frequent Test Function should not add Message. Make sure we do the Test in Content.)*)
(*\[EmptySmallCircle] Wei-Hao's suggestion: Should we use the technique of object oriented concept and association to implement our package functionality. (For e.g., Operator Linearity & ProductRule for PartialD, CovariantD and LieDerivative.) (20250509 WH: The OperatorRules are implemented. However, should think about if we want to truly include the conception of object oriented. For e.g., at least using association?)*)
(*\[EmptySmallCircle] (Mystery. See: Conflict of Inverse Metric code and D[_Tensor,_Symbol] code.nb) Somehow if we try to use D as the function name of "Derivative for Tensor", the "inverse of metric" takes a long time, but we don't know the reason.*)
(*\[EmptySmallCircle] Allow T1\[TensorWedge]T2, where T1 and T2 have different coord. (20250509 WH: To allow so, we should firstly allow different index corresponding to different coordinate. Maybe the concept of object-oriented could help.)*)
(*\[EmptySmallCircle] Right now we only inherit the property from the first Tensor when we do TensorWedge. (20250509 WH: In fact, for a lot Functions, we only inherit properties from the first Tensor.)*)
(*\[UpDownArrow] Same thing*)
(*\[EmptySmallCircle] Consider about if there is any important property that we want to inherit from the second Tensor.*)
(*\[EmptySmallCircle] Room for improvement that Wei-Hao did on TensorSymmetry {Antisymmetric[{SubMinus[\[Mu]],SubMinus[\[Nu]]}]} for Wei-Hao commented out version. {Antisymmetric[{1,2}]} for MMA language.(20250509 WH: Now is the latter. Consider if there is benefit to back to use the commented out version.)*)
(*\[EmptySmallCircle] Notice that if there is potential danger for all the Extract Functions*)
(*\[EmptySmallCircle] When we displace a private variable (for e.g., TensoriaCalc`Private`\[Nu]$3079$3082, and those number are generated by Module and Unique). Can we remove the TensoriaCalc`Private in front of it. ("Strip" function in Python.)*)
(*\[EmptySmallCircle] Keep in view: What MMA function will Thread through everything and what does not. For e.g., Simplify goes through everything.*)
(*\[EmptySmallCircle] Does changing all the Module into Block make TensoriaCalc run faster?*)
(*\[UpDownArrow]*)
(*\[EmptySmallCircle] Gradually change Module into Block and make sure it works. (Theoretically, Block is more efficient, but simply replacing all Module with Block doesn't work.)*)
(*\[EmptySmallCircle] ref/CoordinateTransformData*)
(*\[EmptySmallCircle] Check for the consistency of the information inherited from the input Tensor especially TooltipDisplay, TooltipStyle, TensorAssumption, and TensorOperator. Generally, the output of any function is generated by replacing the information of the input Tensor. This way the Rules mentioned before will be automatically inherited. To be on the safe side, check for the consistency. *)
(*\[EmptySmallCircle] Refer to "dT2vector.nb". After Symmetrize an abstract tensor, it can not be recognized symmetric with MMA TensorSymmetry.*)
(*\[EmptySmallCircle] Bracket problem in a/symmetrize. (20250512 WH: For e.g., RaiseAll and LowerAllIndices. the bracket should move at the same time.)*)
(*\[UpDownArrow]Same thing*)
(*\[EmptySmallCircle] We haven't add a code to also move brackets and vertical bars when we use MoveIndices (or SwapIndices?). Brackets and vertical bars should always move with its nearby indices.*)
(*\[EmptySmallCircle] ts should not inherent?(20250512 WH: ts means TensorSymmetry. If your output of the function gives different Tensor, we should calculate ts again or throw away the old ts.)*)
(*\[EmptySmallCircle] SwapIndices and ts?(20250512 WH: How do they interact?)*)
(*\[EmptySmallCircle] Delete redundant information in notebook to faster(20250512 WH: This is a guide. If a single notebook store too much information, it will easily get slow, especially while you do searching.)*)
(*\[EmptySmallCircle] automatically sorting problem for contract tensor. (20250512 WH: Short answer: not easy to solve, but now we have alternative solution.*)
(*\[EmptySmallCircle] Wang's code (Split space time while doing ContractTensors) V^\[Mu] Subscript[W, \[Mu]]=V^t1 Subscript[W, t1] +V^t2 Subscript[W, t2]+V^i Subscript[W, i]*)
(*g^\[Mu]\[Nu] Subscript[W, \[Mu]]=g^\[Mu]0 Subscript[W, 0]+g^\[Mu]i Subscript[W, i]*)
(*\[EmptySmallCircle] Tensor Spherical harmonic (transverse traceless)*)
(*\[EmptySmallCircle] Test on geodynamics*)
(*\[EmptySmallCircle] (Mystery. See: Cases[Times object, TensorProduct].nb) Cases of TensorProduct seems that doesn't work well in MMA.*)
(*\[EmptySmallCircle] (Guide) Think about how to make order of cells to make it more systemic/accessible. (Manual and package)*)
(*\[EmptySmallCircle] Christoffel can have TensorAssumption and TensorOperator as its input Rules . *)
(*\[EmptySmallCircle] Distinguish the TestScalarExpressionForm and TestTensorExpressionForm from TestExpressionForm. If users themselves want to do Indices[\[DifferentialD]x\[TensorProduct]\[DifferentialD]y] , we want to return itself? (or other potential issues that we haven't encountered)*)


(* ::Subsection::Closed:: *)
(*Manual or e.g.*)


(* ::Text:: *)
(*\[EmptySmallCircle] Should explain in Web Guide that the covariance of the Tensor is the programmer's/user's responsibility.*)
(*\[EmptySmallCircle] Update web guide!*)
(*\[EmptySmallCircle] Christoffel description: Change SuperMinus SubMinus to words \[LongDash] say explicitly that only up-down-down is accepted.*)
(*\[EmptySmallCircle] In function descriptions, all MetricT should be MetricT_Tensor.*)
(*\[EmptySmallCircle] TensoriaCalc manual: Visualization of the geodesics in Kerr? This would require employing NDSolve in Mathematica. *)
(*\[EmptySmallCircle] TensoriaCalc manual: Reproduce some of the visuals of Kip Thorne's black hole in the movie Interstellar. See https://arxiv.org/abs/1502.03808 https://arxiv.org/abs/1502.03809*)
(*\[EmptySmallCircle] Keep a webpage containing all the Tensor Calculus package on the market.fo*)
(*\[EmptySmallCircle] Warning: CT an OverHat Tensor (a mixed coordinate Tensor). Then specify indices will occur a problem. (20250505 WH: What is the problem? The problem is if we  specify the coordinate, just from the appearance of the tensor, the information of OverHat will lost.)(Here is an example copy from my code:)*)


(* ::Input:: *)
(*(Rt/.{\[Nu]->t,\[Alpha]-> r,\[Beta]-> t})//FS*)
(*R\[Mu]0r0=(RtONFF/.{\!\(\*OverscriptBox[\(\[Nu]\), \(^\)]\)->t,\!\(\*OverscriptBox[\(\[Alpha]\), \(^\)]\)-> r,\!\(\*OverscriptBox[\(\[Beta]\), \(^\)]\)-> t})//FS*)


(* ::Text:: *)
(*\[EmptySmallCircle] Warning: Right now we transform Christoffel into Orthonormal Basis like a tensor.*)
(*\[EmptySmallCircle] Warning: Metric contains Ricci, Riemann..., e.t.c. So we don't deal w/ the case CT a Metric w/ at least one OverHat.(20250505 WH: I didn't see anything we should deal with and why should we warn?)*)
(*\[EmptySmallCircle] Show in the manual: A special case that a problem occurs: How to combine separated integral into one. (Do Local exactness of closed form (Rank-1 & 2) as Tensor Objects (PotentialForm))*)
(*\[EmptySmallCircle] Manual: Show user the definition difference between ours and MMA's.*)
(*\[EmptySmallCircle] Manual: VectorSphericalHarmonic: Introduce user the different system and the default one is the usual coordinate {\[Theta],\[Phi]}*)
(*\[EmptySmallCircle] Find PotentialForm e.g. in Jackson*)
(*\[EmptySmallCircle] Just a reminder: Indices, Coordinates, and TensorComponents are now part of Tensor block. They don't appear in the library like before.  They still work with the same functionality as before, only their place has changed. *)
(*\[EmptySmallCircle] Check if Esc t* Esc === \[TensorProduct] === TensorProduct vs CircleTimes === Esc \otimes Esc has been properly documented in manual*)
(*\[EmptySmallCircle] (Unsolved)An e.g. for E&M: a finite length line with constant electric current. What is the vector potential, electric and magnetic field. *)
(**Utilizing the PotentialForm to demonstrate it.*)
(*\[EmptySmallCircle] Check "solution of Einstein Field eqn" in Yi-Zen Website & library online version: What {x,y,z} to {r \[Theta] \[Phi]} in Kerr (20250512 WH: Found it in other source and become one of an e.g. in WH's thesis 3.9.2)*)
(*\[EmptySmallCircle] (Unsolved)de Sitter: Flat slicing, Static Patch, Open Slicing, Closed Slicing.*)
(*\[EmptySmallCircle] (Unsolved)Hyperboloid in 4+1 flat spacetimes*)
(*\[EmptySmallCircle] (Unsolved)All slicing satisfy hyperboloid eqn. in 4+1 dim.*)
(*\[EmptySmallCircle] (Unsolved)Derive Killing vectors in higher dimensional perspective.*)
(*\[EmptySmallCircle] (Unsolved)Spatial Translation Killing vector in flat slicing (complex, nontrivial)*)
(*\[EmptySmallCircle] FRW metric for Einstein field eq (20250512 WH: WH thesis 3.6)*)
(*\[EmptySmallCircle] Killing Tensor for cosmology (FRW)*)
(*\[EmptySmallCircle] (Unsolved)CT for Killing tensor form one patch to the other for de Sitter.*)
(*\[EmptySmallCircle] (Unsolved)prove that de sitter metric in t x y z coord is still solution of EFE*)
(*\[EmptySmallCircle] (Unsolved)Gram-Schmidt process for Lorentz coord. in higher dim.*)
(*\[EmptySmallCircle] (Unsolved)MMA book: GERD BAUMANN example(20250512 WH: I found this book in NCU library and not sure if it provides any good e.g.)*)
(*\[EmptySmallCircle] (Unsolved)Try to reproduce Kerr-de-Sitter ONFF in Kerr-Schild coord. Test eigensystem*)
(*\[EmptySmallCircle] 2-sphere geodesics*)
(*\[EmptySmallCircle] div B=0 -> B=curl A*)
(*\[EmptySmallCircle] (Guide) Think about how to make order of cells to make it more systemic/accessible. (Manual and package)*)
(*\[EmptySmallCircle] Warn the users to check the anti-symmetry property (its TensorComponents) of input tensor of TensorWedge themselves. We don't check it them.*)


(* ::Subsection::Closed:: *)
(*Ask meaning*)


(* ::Text:: *)
(*\[EmptySmallCircle] How to implement pop-up message paste options? (LieDerivative works; but not ToTensor \[LongDash] why?)*)
(*\[EmptySmallCircle] Are NonMetricTensor and ToTensor duplicates? Maybe get rid of NonMetricTensor?*)
(*\[EmptySmallCircle] There's a funny bug in Afidah's code. Is it a TensoriaCalc problem?*)
(*\[EmptySmallCircle] TensorComponents need to allow for extraction of components for products of Tensors with different coordinate systems; i.e., TensorComponents[t1 t2] needs to work even if t1 and t2 have different coordinates.*)
(*\[EmptySmallCircle] Mini projects to solve, as non trivial examples for what TensoriaCalc can do.*)
(*\[EmptySmallCircle] Make ContractTensors (and possibly other similar functions) able to handle non-polynomial Tensor expressions*)
(*\[EmptySmallCircle] All case as functions*)
(*\[EmptySmallCircle] Allow {xxx___} for other property (20250512 WH: I confess I wrote it down but I can't remember what it means now. It put in my keeping in view list.)*)
(*\[EmptySmallCircle] TooltipStyle in PotentialForm and CHD -> use replacement(20250513 WH: I don't know what it means. Probably it not a big deal.)*)
(*\[EmptySmallCircle] What can we learn from this:*)


(* ::Input:: *)
(*{a,b,c,d}\[Cross]{d,e,f,g}\[Cross]{h,i,j,k}==HodgeDual[{a,b,c,d}\[TensorWedge]{d,e,f,g}\[TensorWedge]{h,i,j,k}]*)


(* ::Subsection::Closed:: *)
(*Think again*)


(* ::Text:: *)
(*\[EmptySmallCircle] Hodge dual should all be denoted by tilde; make sure we change all stars to tildes in our code. (20250509 WH: I think star is also good for me from the PoV of differential form sense. Consider to let user decide?)*)
(*\[EmptySmallCircle] Conceptual consistency of MHDSystem code. Why define internal tensor functions when we only use it once? Why does the output not allow for flexibility in moving indices?*)
(*\[EmptySmallCircle] MoveIndices and SwapIndices: Do we want to put indices list at the first argument?*)
(*\[EmptySmallCircle] Consider about if we want to check "Christoffel Symbols" when applying MoveIndices, LowerAllIndices, etc.*)
(*\[EmptySmallCircle] Sometimes our function arguments are Replacement Rules, sometimes they aren't. Inconsistency? Should we make input more consistent?*)
(*\[EmptySmallCircle] Should the computation of Weyl be part of the Metric code?*)
(*\[EmptySmallCircle] Christoffel won't be transformed into orthonormal basis by users? Right now we didn't take care of coord. transf. of Christoffel w/ OverHat indices.*)
(*\[EmptySmallCircle] How to make CoordinateSystem as mandatory argument in Metric?*)
(*\[EmptySmallCircle] Should we replace all Tooltipdisplay with Tooltip? The former seems to have vanished in MMA documentation.*)
(*\[EmptySmallCircle] RemoveUnderBarredIndices for tensor as a public function?*)
(*\[UpDownArrow] Same thing*)
(*\[EmptySmallCircle] Consider to public RemoveUnderBarredIndices & RemoveRepeatedUnderBarredIndices. Is there any internal function that we also want to public.*)
(*\[EmptySmallCircle] Make DifferentialFormCheck & TensorIsFullyAntiSymmetric public?*)
(*\[EmptySmallCircle] z and z bar coord of SHV-> If there is benefit, declare it. (20250509 WH: Now we only have S^2 coord.)*)
(*\[EmptySmallCircle]  Notation package: Symbolize[NotationTemplateTag[\!\(\*OverscriptBox[\(_\), \(^\)]\)]] to make Head[\!\(\*OverscriptBox[\(i\), \(^\)]\)] to be Symbol (20250509 WH: Still need to figure out if this is a good idea.)*)
(*\[EmptySmallCircle]  Consider if we want to make Operators' Rules public. (20250509 WH: OperatorDistributeOverPlus is public now. Others are commented out.)*)
(*\[EmptySmallCircle] Consider to do a consistency fixed on CoordinateSystem: 1. The extract function is now called Coordinates, should we change it with the same name of property CoordinateSystem? 2. CoordinateSystem is one of the most mandatory properties of a Tensor object. However, in a lot of Functions, users input it as the way we input an optional properties. Consider to change it back to a true mandatory argument. There are pros and cons. The benefit is user don't need to remember so many order of arguments, because of Orderless property. They can input wherever they want. The disadvantages are inconsistency and the confusion of whether it is mandatory or optional. One more benefit: saving hand writing. The following function involve "CoordinateSystem->{___}" as input: Metric, NonMetricTensor, ToTensorComponents, PartialD.*)
(*\[EmptySmallCircle] We are still considering whether  to keep adding these brackets, and vertical bars. When we symmetrize more then one time, the indices list will look messy. There will be some e.g. in following section.*)
(*\[EmptySmallCircle] CurveST P.7.6(20250512 WH: Not sure if it is still Problem 7.6 now?)*)


(* ::Subsection::Closed:: *)
(*Published version note*)


(* ::Text:: *)
(*\[EmptySmallCircle] TestTensorIsFullyAntiSymmetric should be a public function, because we don't use inside any where of our package.*)


(* ::Subsection:: *)
(*Notes and To-do's (Uncategorized)*)
